// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"
	"time"

	msp2 "github.com/hyperledger-labs/fabric-smart-client/platform/fabric/core/generic/msp"
)

type ConfigProvider struct {
	GetStringStub        func(key string) string
	getStringMutex       sync.RWMutex
	getStringArgsForCall []struct {
		key string
	}
	getStringReturns struct {
		result1 string
	}
	getStringReturnsOnCall map[int]struct {
		result1 string
	}
	GetDurationStub        func(key string) time.Duration
	getDurationMutex       sync.RWMutex
	getDurationArgsForCall []struct {
		key string
	}
	getDurationReturns struct {
		result1 time.Duration
	}
	getDurationReturnsOnCall map[int]struct {
		result1 time.Duration
	}
	GetBoolStub        func(key string) bool
	getBoolMutex       sync.RWMutex
	getBoolArgsForCall []struct {
		key string
	}
	getBoolReturns struct {
		result1 bool
	}
	getBoolReturnsOnCall map[int]struct {
		result1 bool
	}
	GetStringSliceStub        func(key string) []string
	getStringSliceMutex       sync.RWMutex
	getStringSliceArgsForCall []struct {
		key string
	}
	getStringSliceReturns struct {
		result1 []string
	}
	getStringSliceReturnsOnCall map[int]struct {
		result1 []string
	}
	IsSetStub        func(key string) bool
	isSetMutex       sync.RWMutex
	isSetArgsForCall []struct {
		key string
	}
	isSetReturns struct {
		result1 bool
	}
	isSetReturnsOnCall map[int]struct {
		result1 bool
	}
	UnmarshalKeyStub        func(key string, rawVal interface{}) error
	unmarshalKeyMutex       sync.RWMutex
	unmarshalKeyArgsForCall []struct {
		key    string
		rawVal interface{}
	}
	unmarshalKeyReturns struct {
		result1 error
	}
	unmarshalKeyReturnsOnCall map[int]struct {
		result1 error
	}
	ConfigFileUsedStub        func() string
	configFileUsedMutex       sync.RWMutex
	configFileUsedArgsForCall []struct{}
	configFileUsedReturns     struct {
		result1 string
	}
	configFileUsedReturnsOnCall map[int]struct {
		result1 string
	}
	GetPathStub        func(key string) string
	getPathMutex       sync.RWMutex
	getPathArgsForCall []struct {
		key string
	}
	getPathReturns struct {
		result1 string
	}
	getPathReturnsOnCall map[int]struct {
		result1 string
	}
	TranslatePathStub        func(path string) string
	translatePathMutex       sync.RWMutex
	translatePathArgsForCall []struct {
		path string
	}
	translatePathReturns struct {
		result1 string
	}
	translatePathReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConfigProvider) GetString(key string) string {
	fake.getStringMutex.Lock()
	ret, specificReturn := fake.getStringReturnsOnCall[len(fake.getStringArgsForCall)]
	fake.getStringArgsForCall = append(fake.getStringArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("GetString", []interface{}{key})
	fake.getStringMutex.Unlock()
	if fake.GetStringStub != nil {
		return fake.GetStringStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getStringReturns.result1
}

func (fake *ConfigProvider) GetStringCallCount() int {
	fake.getStringMutex.RLock()
	defer fake.getStringMutex.RUnlock()
	return len(fake.getStringArgsForCall)
}

func (fake *ConfigProvider) GetStringArgsForCall(i int) string {
	fake.getStringMutex.RLock()
	defer fake.getStringMutex.RUnlock()
	return fake.getStringArgsForCall[i].key
}

func (fake *ConfigProvider) GetStringReturns(result1 string) {
	fake.GetStringStub = nil
	fake.getStringReturns = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) GetStringReturnsOnCall(i int, result1 string) {
	fake.GetStringStub = nil
	if fake.getStringReturnsOnCall == nil {
		fake.getStringReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getStringReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) GetDuration(key string) time.Duration {
	fake.getDurationMutex.Lock()
	ret, specificReturn := fake.getDurationReturnsOnCall[len(fake.getDurationArgsForCall)]
	fake.getDurationArgsForCall = append(fake.getDurationArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("GetDuration", []interface{}{key})
	fake.getDurationMutex.Unlock()
	if fake.GetDurationStub != nil {
		return fake.GetDurationStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getDurationReturns.result1
}

func (fake *ConfigProvider) GetDurationCallCount() int {
	fake.getDurationMutex.RLock()
	defer fake.getDurationMutex.RUnlock()
	return len(fake.getDurationArgsForCall)
}

func (fake *ConfigProvider) GetDurationArgsForCall(i int) string {
	fake.getDurationMutex.RLock()
	defer fake.getDurationMutex.RUnlock()
	return fake.getDurationArgsForCall[i].key
}

func (fake *ConfigProvider) GetDurationReturns(result1 time.Duration) {
	fake.GetDurationStub = nil
	fake.getDurationReturns = struct {
		result1 time.Duration
	}{result1}
}

func (fake *ConfigProvider) GetDurationReturnsOnCall(i int, result1 time.Duration) {
	fake.GetDurationStub = nil
	if fake.getDurationReturnsOnCall == nil {
		fake.getDurationReturnsOnCall = make(map[int]struct {
			result1 time.Duration
		})
	}
	fake.getDurationReturnsOnCall[i] = struct {
		result1 time.Duration
	}{result1}
}

func (fake *ConfigProvider) GetBool(key string) bool {
	fake.getBoolMutex.Lock()
	ret, specificReturn := fake.getBoolReturnsOnCall[len(fake.getBoolArgsForCall)]
	fake.getBoolArgsForCall = append(fake.getBoolArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("GetBool", []interface{}{key})
	fake.getBoolMutex.Unlock()
	if fake.GetBoolStub != nil {
		return fake.GetBoolStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getBoolReturns.result1
}

func (fake *ConfigProvider) GetBoolCallCount() int {
	fake.getBoolMutex.RLock()
	defer fake.getBoolMutex.RUnlock()
	return len(fake.getBoolArgsForCall)
}

func (fake *ConfigProvider) GetBoolArgsForCall(i int) string {
	fake.getBoolMutex.RLock()
	defer fake.getBoolMutex.RUnlock()
	return fake.getBoolArgsForCall[i].key
}

func (fake *ConfigProvider) GetBoolReturns(result1 bool) {
	fake.GetBoolStub = nil
	fake.getBoolReturns = struct {
		result1 bool
	}{result1}
}

func (fake *ConfigProvider) GetBoolReturnsOnCall(i int, result1 bool) {
	fake.GetBoolStub = nil
	if fake.getBoolReturnsOnCall == nil {
		fake.getBoolReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.getBoolReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *ConfigProvider) GetStringSlice(key string) []string {
	fake.getStringSliceMutex.Lock()
	ret, specificReturn := fake.getStringSliceReturnsOnCall[len(fake.getStringSliceArgsForCall)]
	fake.getStringSliceArgsForCall = append(fake.getStringSliceArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("GetStringSlice", []interface{}{key})
	fake.getStringSliceMutex.Unlock()
	if fake.GetStringSliceStub != nil {
		return fake.GetStringSliceStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getStringSliceReturns.result1
}

func (fake *ConfigProvider) GetStringSliceCallCount() int {
	fake.getStringSliceMutex.RLock()
	defer fake.getStringSliceMutex.RUnlock()
	return len(fake.getStringSliceArgsForCall)
}

func (fake *ConfigProvider) GetStringSliceArgsForCall(i int) string {
	fake.getStringSliceMutex.RLock()
	defer fake.getStringSliceMutex.RUnlock()
	return fake.getStringSliceArgsForCall[i].key
}

func (fake *ConfigProvider) GetStringSliceReturns(result1 []string) {
	fake.GetStringSliceStub = nil
	fake.getStringSliceReturns = struct {
		result1 []string
	}{result1}
}

func (fake *ConfigProvider) GetStringSliceReturnsOnCall(i int, result1 []string) {
	fake.GetStringSliceStub = nil
	if fake.getStringSliceReturnsOnCall == nil {
		fake.getStringSliceReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getStringSliceReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *ConfigProvider) IsSet(key string) bool {
	fake.isSetMutex.Lock()
	ret, specificReturn := fake.isSetReturnsOnCall[len(fake.isSetArgsForCall)]
	fake.isSetArgsForCall = append(fake.isSetArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("IsSet", []interface{}{key})
	fake.isSetMutex.Unlock()
	if fake.IsSetStub != nil {
		return fake.IsSetStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isSetReturns.result1
}

func (fake *ConfigProvider) IsSetCallCount() int {
	fake.isSetMutex.RLock()
	defer fake.isSetMutex.RUnlock()
	return len(fake.isSetArgsForCall)
}

func (fake *ConfigProvider) IsSetArgsForCall(i int) string {
	fake.isSetMutex.RLock()
	defer fake.isSetMutex.RUnlock()
	return fake.isSetArgsForCall[i].key
}

func (fake *ConfigProvider) IsSetReturns(result1 bool) {
	fake.IsSetStub = nil
	fake.isSetReturns = struct {
		result1 bool
	}{result1}
}

func (fake *ConfigProvider) IsSetReturnsOnCall(i int, result1 bool) {
	fake.IsSetStub = nil
	if fake.isSetReturnsOnCall == nil {
		fake.isSetReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isSetReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *ConfigProvider) UnmarshalKey(key string, rawVal interface{}) error {
	fake.unmarshalKeyMutex.Lock()
	ret, specificReturn := fake.unmarshalKeyReturnsOnCall[len(fake.unmarshalKeyArgsForCall)]
	fake.unmarshalKeyArgsForCall = append(fake.unmarshalKeyArgsForCall, struct {
		key    string
		rawVal interface{}
	}{key, rawVal})
	fake.recordInvocation("UnmarshalKey", []interface{}{key, rawVal})
	fake.unmarshalKeyMutex.Unlock()
	if fake.UnmarshalKeyStub != nil {
		return fake.UnmarshalKeyStub(key, rawVal)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmarshalKeyReturns.result1
}

func (fake *ConfigProvider) UnmarshalKeyCallCount() int {
	fake.unmarshalKeyMutex.RLock()
	defer fake.unmarshalKeyMutex.RUnlock()
	return len(fake.unmarshalKeyArgsForCall)
}

func (fake *ConfigProvider) UnmarshalKeyArgsForCall(i int) (string, interface{}) {
	fake.unmarshalKeyMutex.RLock()
	defer fake.unmarshalKeyMutex.RUnlock()
	return fake.unmarshalKeyArgsForCall[i].key, fake.unmarshalKeyArgsForCall[i].rawVal
}

func (fake *ConfigProvider) UnmarshalKeyReturns(result1 error) {
	fake.UnmarshalKeyStub = nil
	fake.unmarshalKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ConfigProvider) UnmarshalKeyReturnsOnCall(i int, result1 error) {
	fake.UnmarshalKeyStub = nil
	if fake.unmarshalKeyReturnsOnCall == nil {
		fake.unmarshalKeyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmarshalKeyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ConfigProvider) ConfigFileUsed() string {
	fake.configFileUsedMutex.Lock()
	ret, specificReturn := fake.configFileUsedReturnsOnCall[len(fake.configFileUsedArgsForCall)]
	fake.configFileUsedArgsForCall = append(fake.configFileUsedArgsForCall, struct{}{})
	fake.recordInvocation("ConfigFileUsed", []interface{}{})
	fake.configFileUsedMutex.Unlock()
	if fake.ConfigFileUsedStub != nil {
		return fake.ConfigFileUsedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.configFileUsedReturns.result1
}

func (fake *ConfigProvider) ConfigFileUsedCallCount() int {
	fake.configFileUsedMutex.RLock()
	defer fake.configFileUsedMutex.RUnlock()
	return len(fake.configFileUsedArgsForCall)
}

func (fake *ConfigProvider) ConfigFileUsedReturns(result1 string) {
	fake.ConfigFileUsedStub = nil
	fake.configFileUsedReturns = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) ConfigFileUsedReturnsOnCall(i int, result1 string) {
	fake.ConfigFileUsedStub = nil
	if fake.configFileUsedReturnsOnCall == nil {
		fake.configFileUsedReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.configFileUsedReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) GetPath(key string) string {
	fake.getPathMutex.Lock()
	ret, specificReturn := fake.getPathReturnsOnCall[len(fake.getPathArgsForCall)]
	fake.getPathArgsForCall = append(fake.getPathArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("GetPath", []interface{}{key})
	fake.getPathMutex.Unlock()
	if fake.GetPathStub != nil {
		return fake.GetPathStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getPathReturns.result1
}

func (fake *ConfigProvider) GetPathCallCount() int {
	fake.getPathMutex.RLock()
	defer fake.getPathMutex.RUnlock()
	return len(fake.getPathArgsForCall)
}

func (fake *ConfigProvider) GetPathArgsForCall(i int) string {
	fake.getPathMutex.RLock()
	defer fake.getPathMutex.RUnlock()
	return fake.getPathArgsForCall[i].key
}

func (fake *ConfigProvider) GetPathReturns(result1 string) {
	fake.GetPathStub = nil
	fake.getPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) GetPathReturnsOnCall(i int, result1 string) {
	fake.GetPathStub = nil
	if fake.getPathReturnsOnCall == nil {
		fake.getPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) TranslatePath(path string) string {
	fake.translatePathMutex.Lock()
	ret, specificReturn := fake.translatePathReturnsOnCall[len(fake.translatePathArgsForCall)]
	fake.translatePathArgsForCall = append(fake.translatePathArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("TranslatePath", []interface{}{path})
	fake.translatePathMutex.Unlock()
	if fake.TranslatePathStub != nil {
		return fake.TranslatePathStub(path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.translatePathReturns.result1
}

func (fake *ConfigProvider) TranslatePathCallCount() int {
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	return len(fake.translatePathArgsForCall)
}

func (fake *ConfigProvider) TranslatePathArgsForCall(i int) string {
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	return fake.translatePathArgsForCall[i].path
}

func (fake *ConfigProvider) TranslatePathReturns(result1 string) {
	fake.TranslatePathStub = nil
	fake.translatePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) TranslatePathReturnsOnCall(i int, result1 string) {
	fake.TranslatePathStub = nil
	if fake.translatePathReturnsOnCall == nil {
		fake.translatePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.translatePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ConfigProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStringMutex.RLock()
	defer fake.getStringMutex.RUnlock()
	fake.getDurationMutex.RLock()
	defer fake.getDurationMutex.RUnlock()
	fake.getBoolMutex.RLock()
	defer fake.getBoolMutex.RUnlock()
	fake.getStringSliceMutex.RLock()
	defer fake.getStringSliceMutex.RUnlock()
	fake.isSetMutex.RLock()
	defer fake.isSetMutex.RUnlock()
	fake.unmarshalKeyMutex.RLock()
	defer fake.unmarshalKeyMutex.RUnlock()
	fake.configFileUsedMutex.RLock()
	defer fake.configFileUsedMutex.RUnlock()
	fake.getPathMutex.RLock()
	defer fake.getPathMutex.RUnlock()
	fake.translatePathMutex.RLock()
	defer fake.translatePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ConfigProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ msp2.ConfigProvider = new(ConfigProvider)
