// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"crypto/tls"
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/fabric/services/weaver/relay"
	relayprotos_go "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/relay"
	"google.golang.org/grpc"
)

type DataTransferClient struct {
	CreateDataTransferClientStub        func() (*grpc.ClientConn, relayprotos_go.DataTransferClient, error)
	createDataTransferClientMutex       sync.RWMutex
	createDataTransferClientArgsForCall []struct{}
	createDataTransferClientReturns     struct {
		result1 *grpc.ClientConn
		result2 relayprotos_go.DataTransferClient
		result3 error
	}
	createDataTransferClientReturnsOnCall map[int]struct {
		result1 *grpc.ClientConn
		result2 relayprotos_go.DataTransferClient
		result3 error
	}
	CertificateStub        func() *tls.Certificate
	certificateMutex       sync.RWMutex
	certificateArgsForCall []struct{}
	certificateReturns     struct {
		result1 *tls.Certificate
	}
	certificateReturnsOnCall map[int]struct {
		result1 *tls.Certificate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DataTransferClient) CreateDataTransferClient() (*grpc.ClientConn, relayprotos_go.DataTransferClient, error) {
	fake.createDataTransferClientMutex.Lock()
	ret, specificReturn := fake.createDataTransferClientReturnsOnCall[len(fake.createDataTransferClientArgsForCall)]
	fake.createDataTransferClientArgsForCall = append(fake.createDataTransferClientArgsForCall, struct{}{})
	fake.recordInvocation("CreateDataTransferClient", []interface{}{})
	fake.createDataTransferClientMutex.Unlock()
	if fake.CreateDataTransferClientStub != nil {
		return fake.CreateDataTransferClientStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createDataTransferClientReturns.result1, fake.createDataTransferClientReturns.result2, fake.createDataTransferClientReturns.result3
}

func (fake *DataTransferClient) CreateDataTransferClientCallCount() int {
	fake.createDataTransferClientMutex.RLock()
	defer fake.createDataTransferClientMutex.RUnlock()
	return len(fake.createDataTransferClientArgsForCall)
}

func (fake *DataTransferClient) CreateDataTransferClientReturns(result1 *grpc.ClientConn, result2 relayprotos_go.DataTransferClient, result3 error) {
	fake.CreateDataTransferClientStub = nil
	fake.createDataTransferClientReturns = struct {
		result1 *grpc.ClientConn
		result2 relayprotos_go.DataTransferClient
		result3 error
	}{result1, result2, result3}
}

func (fake *DataTransferClient) CreateDataTransferClientReturnsOnCall(i int, result1 *grpc.ClientConn, result2 relayprotos_go.DataTransferClient, result3 error) {
	fake.CreateDataTransferClientStub = nil
	if fake.createDataTransferClientReturnsOnCall == nil {
		fake.createDataTransferClientReturnsOnCall = make(map[int]struct {
			result1 *grpc.ClientConn
			result2 relayprotos_go.DataTransferClient
			result3 error
		})
	}
	fake.createDataTransferClientReturnsOnCall[i] = struct {
		result1 *grpc.ClientConn
		result2 relayprotos_go.DataTransferClient
		result3 error
	}{result1, result2, result3}
}

func (fake *DataTransferClient) Certificate() *tls.Certificate {
	fake.certificateMutex.Lock()
	ret, specificReturn := fake.certificateReturnsOnCall[len(fake.certificateArgsForCall)]
	fake.certificateArgsForCall = append(fake.certificateArgsForCall, struct{}{})
	fake.recordInvocation("Certificate", []interface{}{})
	fake.certificateMutex.Unlock()
	if fake.CertificateStub != nil {
		return fake.CertificateStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.certificateReturns.result1
}

func (fake *DataTransferClient) CertificateCallCount() int {
	fake.certificateMutex.RLock()
	defer fake.certificateMutex.RUnlock()
	return len(fake.certificateArgsForCall)
}

func (fake *DataTransferClient) CertificateReturns(result1 *tls.Certificate) {
	fake.CertificateStub = nil
	fake.certificateReturns = struct {
		result1 *tls.Certificate
	}{result1}
}

func (fake *DataTransferClient) CertificateReturnsOnCall(i int, result1 *tls.Certificate) {
	fake.CertificateStub = nil
	if fake.certificateReturnsOnCall == nil {
		fake.certificateReturnsOnCall = make(map[int]struct {
			result1 *tls.Certificate
		})
	}
	fake.certificateReturnsOnCall[i] = struct {
		result1 *tls.Certificate
	}{result1}
}

func (fake *DataTransferClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDataTransferClientMutex.RLock()
	defer fake.createDataTransferClientMutex.RUnlock()
	fake.certificateMutex.RLock()
	defer fake.certificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DataTransferClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ relay.DataTransferClient = new(DataTransferClient)
