// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/driver"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type EndpointService struct {
	EndpointStub        func(party view.Identity) (map[driver.PortName]string, error)
	endpointMutex       sync.RWMutex
	endpointArgsForCall []struct {
		party view.Identity
	}
	endpointReturns struct {
		result1 map[driver.PortName]string
		result2 error
	}
	endpointReturnsOnCall map[int]struct {
		result1 map[driver.PortName]string
		result2 error
	}
	ResolveStub        func(party view.Identity) (view.Identity, map[driver.PortName]string, []byte, error)
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		party view.Identity
	}
	resolveReturns struct {
		result1 view.Identity
		result2 map[driver.PortName]string
		result3 []byte
		result4 error
	}
	resolveReturnsOnCall map[int]struct {
		result1 view.Identity
		result2 map[driver.PortName]string
		result3 []byte
		result4 error
	}
	GetIdentityStub        func(label string, pkiID []byte) (view.Identity, error)
	getIdentityMutex       sync.RWMutex
	getIdentityArgsForCall []struct {
		label string
		pkiID []byte
	}
	getIdentityReturns struct {
		result1 view.Identity
		result2 error
	}
	getIdentityReturnsOnCall map[int]struct {
		result1 view.Identity
		result2 error
	}
	BindStub        func(b view.Identity, a view.Identity) error
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		b view.Identity
		a view.Identity
	}
	bindReturns struct {
		result1 error
	}
	bindReturnsOnCall map[int]struct {
		result1 error
	}
	IsBoundToStub        func(a view.Identity, b view.Identity) bool
	isBoundToMutex       sync.RWMutex
	isBoundToArgsForCall []struct {
		a view.Identity
		b view.Identity
	}
	isBoundToReturns struct {
		result1 bool
	}
	isBoundToReturnsOnCall map[int]struct {
		result1 bool
	}
	AddResolverStub        func(name string, domain string, addresses map[string]string, aliases []string, id []byte) (view.Identity, error)
	addResolverMutex       sync.RWMutex
	addResolverArgsForCall []struct {
		name      string
		domain    string
		addresses map[string]string
		aliases   []string
		id        []byte
	}
	addResolverReturns struct {
		result1 view.Identity
		result2 error
	}
	addResolverReturnsOnCall map[int]struct {
		result1 view.Identity
		result2 error
	}
	AddPKIResolverStub        func(pkiResolver driver.PKIResolver) error
	addPKIResolverMutex       sync.RWMutex
	addPKIResolverArgsForCall []struct {
		pkiResolver driver.PKIResolver
	}
	addPKIResolverReturns struct {
		result1 error
	}
	addPKIResolverReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EndpointService) Endpoint(party view.Identity) (map[driver.PortName]string, error) {
	fake.endpointMutex.Lock()
	ret, specificReturn := fake.endpointReturnsOnCall[len(fake.endpointArgsForCall)]
	fake.endpointArgsForCall = append(fake.endpointArgsForCall, struct {
		party view.Identity
	}{party})
	fake.recordInvocation("Endpoint", []interface{}{party})
	fake.endpointMutex.Unlock()
	if fake.EndpointStub != nil {
		return fake.EndpointStub(party)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.endpointReturns.result1, fake.endpointReturns.result2
}

func (fake *EndpointService) EndpointCallCount() int {
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	return len(fake.endpointArgsForCall)
}

func (fake *EndpointService) EndpointArgsForCall(i int) view.Identity {
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	return fake.endpointArgsForCall[i].party
}

func (fake *EndpointService) EndpointReturns(result1 map[driver.PortName]string, result2 error) {
	fake.EndpointStub = nil
	fake.endpointReturns = struct {
		result1 map[driver.PortName]string
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) EndpointReturnsOnCall(i int, result1 map[driver.PortName]string, result2 error) {
	fake.EndpointStub = nil
	if fake.endpointReturnsOnCall == nil {
		fake.endpointReturnsOnCall = make(map[int]struct {
			result1 map[driver.PortName]string
			result2 error
		})
	}
	fake.endpointReturnsOnCall[i] = struct {
		result1 map[driver.PortName]string
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) Resolve(party view.Identity) (view.Identity, map[driver.PortName]string, []byte, error) {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		party view.Identity
	}{party})
	fake.recordInvocation("Resolve", []interface{}{party})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(party)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.resolveReturns.result1, fake.resolveReturns.result2, fake.resolveReturns.result3, fake.resolveReturns.result4
}

func (fake *EndpointService) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *EndpointService) ResolveArgsForCall(i int) view.Identity {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].party
}

func (fake *EndpointService) ResolveReturns(result1 view.Identity, result2 map[driver.PortName]string, result3 []byte, result4 error) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 view.Identity
		result2 map[driver.PortName]string
		result3 []byte
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *EndpointService) ResolveReturnsOnCall(i int, result1 view.Identity, result2 map[driver.PortName]string, result3 []byte, result4 error) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 view.Identity
			result2 map[driver.PortName]string
			result3 []byte
			result4 error
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 view.Identity
		result2 map[driver.PortName]string
		result3 []byte
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *EndpointService) GetIdentity(label string, pkiID []byte) (view.Identity, error) {
	var pkiIDCopy []byte
	if pkiID != nil {
		pkiIDCopy = make([]byte, len(pkiID))
		copy(pkiIDCopy, pkiID)
	}
	fake.getIdentityMutex.Lock()
	ret, specificReturn := fake.getIdentityReturnsOnCall[len(fake.getIdentityArgsForCall)]
	fake.getIdentityArgsForCall = append(fake.getIdentityArgsForCall, struct {
		label string
		pkiID []byte
	}{label, pkiIDCopy})
	fake.recordInvocation("GetIdentity", []interface{}{label, pkiIDCopy})
	fake.getIdentityMutex.Unlock()
	if fake.GetIdentityStub != nil {
		return fake.GetIdentityStub(label, pkiID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getIdentityReturns.result1, fake.getIdentityReturns.result2
}

func (fake *EndpointService) GetIdentityCallCount() int {
	fake.getIdentityMutex.RLock()
	defer fake.getIdentityMutex.RUnlock()
	return len(fake.getIdentityArgsForCall)
}

func (fake *EndpointService) GetIdentityArgsForCall(i int) (string, []byte) {
	fake.getIdentityMutex.RLock()
	defer fake.getIdentityMutex.RUnlock()
	return fake.getIdentityArgsForCall[i].label, fake.getIdentityArgsForCall[i].pkiID
}

func (fake *EndpointService) GetIdentityReturns(result1 view.Identity, result2 error) {
	fake.GetIdentityStub = nil
	fake.getIdentityReturns = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) GetIdentityReturnsOnCall(i int, result1 view.Identity, result2 error) {
	fake.GetIdentityStub = nil
	if fake.getIdentityReturnsOnCall == nil {
		fake.getIdentityReturnsOnCall = make(map[int]struct {
			result1 view.Identity
			result2 error
		})
	}
	fake.getIdentityReturnsOnCall[i] = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) Bind(b view.Identity, a view.Identity) error {
	fake.bindMutex.Lock()
	ret, specificReturn := fake.bindReturnsOnCall[len(fake.bindArgsForCall)]
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		b view.Identity
		a view.Identity
	}{b, a})
	fake.recordInvocation("Bind", []interface{}{b, a})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(b, a)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bindReturns.result1
}

func (fake *EndpointService) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *EndpointService) BindArgsForCall(i int) (view.Identity, view.Identity) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return fake.bindArgsForCall[i].b, fake.bindArgsForCall[i].a
}

func (fake *EndpointService) BindReturns(result1 error) {
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

func (fake *EndpointService) BindReturnsOnCall(i int, result1 error) {
	fake.BindStub = nil
	if fake.bindReturnsOnCall == nil {
		fake.bindReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EndpointService) IsBoundTo(a view.Identity, b view.Identity) bool {
	fake.isBoundToMutex.Lock()
	ret, specificReturn := fake.isBoundToReturnsOnCall[len(fake.isBoundToArgsForCall)]
	fake.isBoundToArgsForCall = append(fake.isBoundToArgsForCall, struct {
		a view.Identity
		b view.Identity
	}{a, b})
	fake.recordInvocation("IsBoundTo", []interface{}{a, b})
	fake.isBoundToMutex.Unlock()
	if fake.IsBoundToStub != nil {
		return fake.IsBoundToStub(a, b)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isBoundToReturns.result1
}

func (fake *EndpointService) IsBoundToCallCount() int {
	fake.isBoundToMutex.RLock()
	defer fake.isBoundToMutex.RUnlock()
	return len(fake.isBoundToArgsForCall)
}

func (fake *EndpointService) IsBoundToArgsForCall(i int) (view.Identity, view.Identity) {
	fake.isBoundToMutex.RLock()
	defer fake.isBoundToMutex.RUnlock()
	return fake.isBoundToArgsForCall[i].a, fake.isBoundToArgsForCall[i].b
}

func (fake *EndpointService) IsBoundToReturns(result1 bool) {
	fake.IsBoundToStub = nil
	fake.isBoundToReturns = struct {
		result1 bool
	}{result1}
}

func (fake *EndpointService) IsBoundToReturnsOnCall(i int, result1 bool) {
	fake.IsBoundToStub = nil
	if fake.isBoundToReturnsOnCall == nil {
		fake.isBoundToReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isBoundToReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *EndpointService) AddResolver(name string, domain string, addresses map[string]string, aliases []string, id []byte) (view.Identity, error) {
	var aliasesCopy []string
	if aliases != nil {
		aliasesCopy = make([]string, len(aliases))
		copy(aliasesCopy, aliases)
	}
	var idCopy []byte
	if id != nil {
		idCopy = make([]byte, len(id))
		copy(idCopy, id)
	}
	fake.addResolverMutex.Lock()
	ret, specificReturn := fake.addResolverReturnsOnCall[len(fake.addResolverArgsForCall)]
	fake.addResolverArgsForCall = append(fake.addResolverArgsForCall, struct {
		name      string
		domain    string
		addresses map[string]string
		aliases   []string
		id        []byte
	}{name, domain, addresses, aliasesCopy, idCopy})
	fake.recordInvocation("AddResolver", []interface{}{name, domain, addresses, aliasesCopy, idCopy})
	fake.addResolverMutex.Unlock()
	if fake.AddResolverStub != nil {
		return fake.AddResolverStub(name, domain, addresses, aliases, id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addResolverReturns.result1, fake.addResolverReturns.result2
}

func (fake *EndpointService) AddResolverCallCount() int {
	fake.addResolverMutex.RLock()
	defer fake.addResolverMutex.RUnlock()
	return len(fake.addResolverArgsForCall)
}

func (fake *EndpointService) AddResolverArgsForCall(i int) (string, string, map[string]string, []string, []byte) {
	fake.addResolverMutex.RLock()
	defer fake.addResolverMutex.RUnlock()
	return fake.addResolverArgsForCall[i].name, fake.addResolverArgsForCall[i].domain, fake.addResolverArgsForCall[i].addresses, fake.addResolverArgsForCall[i].aliases, fake.addResolverArgsForCall[i].id
}

func (fake *EndpointService) AddResolverReturns(result1 view.Identity, result2 error) {
	fake.AddResolverStub = nil
	fake.addResolverReturns = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) AddResolverReturnsOnCall(i int, result1 view.Identity, result2 error) {
	fake.AddResolverStub = nil
	if fake.addResolverReturnsOnCall == nil {
		fake.addResolverReturnsOnCall = make(map[int]struct {
			result1 view.Identity
			result2 error
		})
	}
	fake.addResolverReturnsOnCall[i] = struct {
		result1 view.Identity
		result2 error
	}{result1, result2}
}

func (fake *EndpointService) AddPKIResolver(pkiResolver driver.PKIResolver) error {
	fake.addPKIResolverMutex.Lock()
	ret, specificReturn := fake.addPKIResolverReturnsOnCall[len(fake.addPKIResolverArgsForCall)]
	fake.addPKIResolverArgsForCall = append(fake.addPKIResolverArgsForCall, struct {
		pkiResolver driver.PKIResolver
	}{pkiResolver})
	fake.recordInvocation("AddPKIResolver", []interface{}{pkiResolver})
	fake.addPKIResolverMutex.Unlock()
	if fake.AddPKIResolverStub != nil {
		return fake.AddPKIResolverStub(pkiResolver)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addPKIResolverReturns.result1
}

func (fake *EndpointService) AddPKIResolverCallCount() int {
	fake.addPKIResolverMutex.RLock()
	defer fake.addPKIResolverMutex.RUnlock()
	return len(fake.addPKIResolverArgsForCall)
}

func (fake *EndpointService) AddPKIResolverArgsForCall(i int) driver.PKIResolver {
	fake.addPKIResolverMutex.RLock()
	defer fake.addPKIResolverMutex.RUnlock()
	return fake.addPKIResolverArgsForCall[i].pkiResolver
}

func (fake *EndpointService) AddPKIResolverReturns(result1 error) {
	fake.AddPKIResolverStub = nil
	fake.addPKIResolverReturns = struct {
		result1 error
	}{result1}
}

func (fake *EndpointService) AddPKIResolverReturnsOnCall(i int, result1 error) {
	fake.AddPKIResolverStub = nil
	if fake.addPKIResolverReturnsOnCall == nil {
		fake.addPKIResolverReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addPKIResolverReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EndpointService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	fake.getIdentityMutex.RLock()
	defer fake.getIdentityMutex.RUnlock()
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	fake.isBoundToMutex.RLock()
	defer fake.isBoundToMutex.RUnlock()
	fake.addResolverMutex.RLock()
	defer fake.addResolverMutex.RUnlock()
	fake.addPKIResolverMutex.RLock()
	defer fake.addPKIResolverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EndpointService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.EndpointService = new(EndpointService)
