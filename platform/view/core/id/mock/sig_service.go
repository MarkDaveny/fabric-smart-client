// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger-labs/fabric-smart-client/platform/view/api"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/core/id"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
)

type SigService struct {
	RegisterSignerWithTypeStub        func(typ api.IdentityType, identity view.Identity, signer api.Signer, verifier api.Verifier) error
	registerSignerWithTypeMutex       sync.RWMutex
	registerSignerWithTypeArgsForCall []struct {
		typ      api.IdentityType
		identity view.Identity
		signer   api.Signer
		verifier api.Verifier
	}
	registerSignerWithTypeReturns struct {
		result1 error
	}
	registerSignerWithTypeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SigService) RegisterSignerWithType(typ api.IdentityType, identity view.Identity, signer api.Signer, verifier api.Verifier) error {
	fake.registerSignerWithTypeMutex.Lock()
	ret, specificReturn := fake.registerSignerWithTypeReturnsOnCall[len(fake.registerSignerWithTypeArgsForCall)]
	fake.registerSignerWithTypeArgsForCall = append(fake.registerSignerWithTypeArgsForCall, struct {
		typ      api.IdentityType
		identity view.Identity
		signer   api.Signer
		verifier api.Verifier
	}{typ, identity, signer, verifier})
	fake.recordInvocation("RegisterSignerWithType", []interface{}{typ, identity, signer, verifier})
	fake.registerSignerWithTypeMutex.Unlock()
	if fake.RegisterSignerWithTypeStub != nil {
		return fake.RegisterSignerWithTypeStub(typ, identity, signer, verifier)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.registerSignerWithTypeReturns.result1
}

func (fake *SigService) RegisterSignerWithTypeCallCount() int {
	fake.registerSignerWithTypeMutex.RLock()
	defer fake.registerSignerWithTypeMutex.RUnlock()
	return len(fake.registerSignerWithTypeArgsForCall)
}

func (fake *SigService) RegisterSignerWithTypeArgsForCall(i int) (api.IdentityType, view.Identity, api.Signer, api.Verifier) {
	fake.registerSignerWithTypeMutex.RLock()
	defer fake.registerSignerWithTypeMutex.RUnlock()
	return fake.registerSignerWithTypeArgsForCall[i].typ, fake.registerSignerWithTypeArgsForCall[i].identity, fake.registerSignerWithTypeArgsForCall[i].signer, fake.registerSignerWithTypeArgsForCall[i].verifier
}

func (fake *SigService) RegisterSignerWithTypeReturns(result1 error) {
	fake.RegisterSignerWithTypeStub = nil
	fake.registerSignerWithTypeReturns = struct {
		result1 error
	}{result1}
}

func (fake *SigService) RegisterSignerWithTypeReturnsOnCall(i int, result1 error) {
	fake.RegisterSignerWithTypeStub = nil
	if fake.registerSignerWithTypeReturnsOnCall == nil {
		fake.registerSignerWithTypeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerSignerWithTypeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerSignerWithTypeMutex.RLock()
	defer fake.registerSignerWithTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ id.SigService = new(SigService)
